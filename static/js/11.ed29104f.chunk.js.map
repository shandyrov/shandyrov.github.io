{"version":3,"sources":["utils/Theme.js","layout/SimpleBreadcrumbs.js","components/Footer.js","components/PrismSyntaxHighlighter.js","../../node_modules/unquote/index.js","../../index.tsx","pages/Category/Post.js"],"names":["getHeaderBackgroundColor","theme","palette","type","getFooterBackgroundColor","StyledBreadcrumb","withStyles","root","backgroundColor","grey","height","spacing","color","primary","contrastText","fontWeight","typography","fontWeightRegular","warning","boxShadow","shadows","emphasize","marginTop","Chip","SimpleBreadcrumbs","links","current","pageNumber","useTheme","aria-label","style","paddingTop","paddingBottom","map","link","index","component","Link","href","label","title","icon","fontSize","padding","to","pathname","category","cursor","dark","Typography","Footer","className","marginLeft","bottom","maxWidth","variant","align","PrismSyntaxHighlighter","props","codeString","children","language","whatLanguage","okaidia","a11yDark","reg","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","class","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","for","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_ITEM_PREFIX","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","BLOCK_SYNTAXES","slugify","str","replace","toLowerCase","parseTableAlignCapture","alignCapture","test","parseTableRow","source","parse","state","prevInTable","inTable","tableRow","trim","cells","forEach","node","i","length","push","content","parseTable","capture","inline","header","split","rowText","getTableStyle","colIndex","textAlign","inlineRegex","regex","exec","simpleInlineRegex","simple","blockRegex","anyScopeRegex","sanitizeUrl","url","decodeURIComponent","match","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","result","parseSimpleInline","parseBlock","Priority","parseCaptureInline","captureNothing","renderNothing","cx","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","getTag","tag","overrides","override","options","React","cloneElement","markdown","createElementFn","createElement","h","overrideProps","undefined","compile","input","forceInline","forceBlock","arr","emitter","parser","wrapper","jsx","forceWrapper","key","attrStringToMap","attributes","reduce","raw","delimiterIdx","indexOf","slice","_","letter","toUpperCase","value","charAt","substr","mappedKey","normalizedValue","styles","kvPair","footnotes","refs","rules","blockQuote","order","HIGH","react","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","address","list","prevCapture","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","adjustedContent","oldStateInline","oldStateList","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","trimmer","trimmed","parseFunc","some","r","tagName","noInnerParse","attrs","htmlSelfClosing","outputFunc","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","ast","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","compiler","useStyles","makeStyles","width","container","display","flexDirection","breakpoints","between","minHeight","up","Post","classes","useState","error","setError","useParams","post","name","file","setContent","getWidth","filteredInt","defaultWidth","data","window","scrollTo","fetch","then","blob","includes","Fragment","onError","backgroundSize","objectFit","Container","code","Highlighter","img","margin"],"mappings":"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","file":"static/js/11.ed29104f.chunk.js","sourcesContent":["export function getHeaderBackgroundColor(theme) {\n  return theme.palette.type === \"dark\" ? \"#252525\" : \"#0F1C24\";\n}\nexport function getFooterBackgroundColor(theme) {\n  return theme.palette.type === \"dark\" ? \"#252525\" : \"#0F1C24\";\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\nimport { Link } from \"react-router-dom\";\nimport { MuiThemeProvider, useTheme } from \"@material-ui/core/styles\";\nimport { emphasize, withStyles } from \"@material-ui/core/styles\";\nimport Chip from \"@material-ui/core/Chip\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nconst StyledBreadcrumb = withStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.grey[700],\n    height: theme.spacing(2),\n    color: theme.palette.primary.contrastText,\n    fontWeight: theme.typography.fontWeightRegular,\n    \"&:hover, &:focus\": {\n      backgroundColor: theme.palette.warning,\n    },\n    \"&:active\": {\n      boxShadow: theme.shadows[1],\n      backgroundColor: emphasize(theme.palette.grey[300], 0.12),\n    },\n    marginTop: \"5px\",\n  },\n}))(Chip);\n\nexport default function SimpleBreadcrumbs({ links = [], current, pageNumber }) {\n  const theme = useTheme();\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Breadcrumbs\n        aria-label=\"breadcrumb\"\n        style={{\n          paddingTop: theme.spacing(2),\n          paddingBottom: theme.spacing(1),\n        }}\n      >\n        {links.map((link, index) => {\n          return (\n            <StyledBreadcrumb\n              key={index}\n              component={Link}\n              href={link.link}\n              label={link.title}\n              icon={\n                index === 0 ? (\n                  <HomeIcon\n                    fontSize=\"small\"\n                    style={{\n                      color: theme.palette.type === \"dark\" ? '\"#999\"' : \"#fff\",\n                      padding: theme.spacing(0.2),\n                    }}\n                  />\n                ) : null\n              }\n              to={{\n                pathname: link.link,\n                pageNumber: pageNumber,\n                category: link.category,\n              }}\n              style={{\n                padding: theme.spacing(1.4),\n                cursor: \"pointer\",\n                color: theme.palette.type === \"dark\" ? \"#ccc\" : \"#fff\",\n                backgroundColor:\n                  theme.palette.type === \"dark\"\n                    ? \"#555\"\n                    : theme.palette.primary.dark,\n              }}\n            />\n          );\n        })}\n        <StyledBreadcrumb\n          component={Typography}\n          label={current}\n          style={{\n            padding: theme.spacing(1.4),\n            color: theme.palette.type === \"dark\" ? \"#ccc\" : \"#fff\",\n            backgroundColor:\n              theme.palette.type === \"dark\"\n                ? \"#555\"\n                : theme.palette.primary.dark,\n          }}\n        />\n        -\n      </Breadcrumbs>\n    </MuiThemeProvider>\n  );\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { getFooterBackgroundColor } from \"../utils/Theme\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\nfunction Footer() {\n  const theme = useTheme();\n\n  return (\n    <footer\n      className=\"\"\n      style={{\n        backgroundColor: getFooterBackgroundColor(theme),\n        marginLeft: \"2px\",\n        bottom: 0,\n        padding: \"10px\",\n      }}\n    >\n      <Container maxWidth=\"lg\" style={{ height: theme.spacing(7) }}>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"textPrimary\"\n          component=\"p\"\n        >\n          Copyright © 2020 - 2021\n        </Typography>\n        <Typography\n          component=\"p\"\n          color=\"textPrimary\"\n          align=\"center\"\n          variant=\"subtitle1\"\n        >\n          All rights reserved\n        </Typography>\n        {/* <Copyright /> */}\n      </Container>\n    </footer>\n  );\n}\nexport default Footer;\n","import React from \"react\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { Prism as ReactSyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  a11yDark,\n  okaidia,\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n//import { darcula } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n// cb darkula\nexport default function PrismSyntaxHighlighter(props) {\n  const theme = useTheme();\n  const codeString = props.children;\n\n  const whatLanguage = () => {\n    switch (props.className) {\n      case \"lang-js\":\n        return \"javascript\";\n      case \"lang-php\":\n        return \"php\";\n      case \"lang-java\":\n        return \"java\";\n      default:\n        return \"c\";\n    }\n  };\n\n  const getTheme = () => {\n    //console.log(theme.palette.type);\n    return theme.palette.type === \"dark\" ? okaidia : a11yDark;\n  };\n\n  return (\n    //showLineNumbers\n    <ReactSyntaxHighlighter language={whatLanguage()} style={getTheme()}>\n      {codeString}\n    </ReactSyntaxHighlighter>\n  );\n}\n","var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _list?: boolean\n    inline?: boolean\n    inTable?: boolean\n    key?: React.Key\n    simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<ParserOutput>\n    react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ComponentType<any>\n        props: Object\n      }>\n    | React.ComponentType<any>\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--.*?-->/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: Object\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(parse, content, state): MarkdownToJSX.ParserResult {\n  state.inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<\n  typeof parseInline\n>> = (capture, parse, state) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type].react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    )\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state.inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state.inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state.inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state.inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(stripHtmlComments(markdown))\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport SimpleBreadcrumbs from \"../../layout/SimpleBreadcrumbs\";\nimport Markdown from \"markdown-to-jsx\";\nimport Highlighter from \"../../components/PrismSyntaxHighlighter\";\nimport Footer from \"../../components/Footer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300,\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    [theme.breakpoints.between(\"xs\", \"md\")]: {\n      minHeight: \"calc(100vh - 131px)\",\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      minHeight: \"calc(100vh - 225px)\",\n    },\n    paddingBottom: theme.spacing(8),\n  },\n}));\n\nexport default function Post(props) {\n  const classes = useStyles();\n  const [error, setError] = useState(false);\n  const { category, post, name, file } = useParams();\n  const [content, setContent] = useState(\"\");\n\n  const getWidth = (filteredInt, defaultWidth = \"80%\") => {\n    const data = filteredInt.match(/(\\d+)/);\n    if (data) {\n      return data[0] + \"%\";\n    } else {\n      return defaultWidth;\n    }\n  };\n  const getDefaultImageName = (path, ext) => {\n    return path + `/post-header1920x200.${ext}`;\n  };\n  const loadImage = () => {\n    //console.log(\"---===URL===---\");\n    //console.log(`/static/md/${category}/${post}/post-header-1.jpg`);\n    //console.log(\"---===Category===---\");\n    //console.log(`/static/md/${category}`);\n    return (\n      <img\n        src={`/static/md/${category}/${post}/post-header-1.jpg`}\n        alt=\"header\"\n        onError={(e) => {\n          if (!error) {\n            setError(true);\n            e.target.src = getDefaultImageName(`/static/md/${category}`, \"jpg\");\n          } else {\n            import(\"../../assets/img/image_not_found.jpg\");\n            e.target.src = \"/static/img/image_not_found.jpg\";\n          }\n        }}\n        style={{\n          width: \"100%\",\n          height: \"150px\",\n          backgroundSize: \"cover\",\n          objectFit: \"cover\",\n        }}\n      />\n    );\n  };\n  useState(() => {\n    // console.log(\"category: \" + category);\n    // console.log(\"post: \" + post);\n    // console.log(\"name: \" + name);\n    // console.log(\"file: \" + file);\n    window.scrollTo(0, 0);\n    fetch(`/static/md/${category}/${post}/${file}.md`)\n      .then((e) => e.blob())\n      .then((file) => {\n        if (file && file.type && file.type.includes(\"text/markdown\")) {\n          return file.text();\n        }\n        return \"\";\n      })\n      .then((text) => setContent(text));\n  }, []);\n  return (\n    <React.Fragment>\n      {loadImage()}\n      <Container maxWidth=\"md\" className={classes.container}>\n        <SimpleBreadcrumbs\n          links={[\n            { title: \"Главная\", link: \"/\", category: \"\" },\n            {\n              title: category,\n              link: `/category/${category}`,\n              category: category,\n            },\n          ]}\n          current={name}\n        />\n        <main>\n          <Markdown\n            children={content}\n            options={{\n              overrides: {\n                code: {\n                  component: Highlighter,\n                },\n                img: {\n                  component: function (e) {\n                    // alt: \"action_reducer_store\"\n                    // className: undefined\n                    // src: \"/assets/md/react/post5/action_reducer_store_lite.png\"\n                    // title: undefined\n                    return (\n                      <img\n                        alt={e.alt}\n                        className={e.className}\n                        src={e.src}\n                        title={e.title}\n                        style={{\n                          width: getWidth(e.alt),\n                          height: \"auto\",\n                          display: \"block\",\n                          margin: \"0 auto\",\n                        }}\n                      />\n                    );\n                  },\n                },\n              },\n            }}\n          />\n        </main>\n      </Container>\n      <Footer />\n    </React.Fragment>\n  );\n}\n"],"sourceRoot":""}